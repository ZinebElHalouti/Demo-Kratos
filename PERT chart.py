# -*- coding: utf-8 -*-
"""Frérot updated.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15VmspaznJoTl-OzuWTRP_2cpOOdzJg1M
"""

import pandas as pd
data=pd.ExcelFile('/content/Fiche des tâches 2.xlsx')
df = pd.read_excel(data, 'Feuil1')
print(df.head())
print(len(df))

df.loc[df.Précedences == "-",'Précedences']="START"

df['Précedences'] = df['Précedences'].str.replace('-',',')

df['Retard']=df['Retard'].astype(float)

s=[]
for i in range(len(df)):
  s.append((df['Libellé'][i], {"Tid": df['Libellé'][i],"start": 0,"duration": df['durée en j'][i],"lag": df['Retard'][i],"end": 0,"responsible": df['Responsables'][i],"pred":[df['Précedences'][i]]}))
print(s)

dictionnaire={}
for x in s:
  dictionnaire.setdefault(x[0],[]).append(x[1])
print(dictionnaire)

import json
with open("/content/preprocessing2.txt", 'w') as convert_file: 
     convert_file.write(json.dumps(dictionnaire))
with open("/content/preprocessing2.txt", "r") as file:
	  a = file.read()
with open("/content/preprocessing2.txt", "w") as file:
    a = a.replace("'",'"')
    a = a.replace('[{','{')
    a = a.replace(']}]',']}')
    a = a.replace('},','},\n')
    a = a.replace(': {"Tid"',': {\n   "Tid"')
    a = a.replace(', "start"',',\n   "start"')
    a = a.replace(', "duration"',',\n   "duration"')
    a = a.replace(', "lag"',',\n   "lag"')
    a = a.replace(', "end"',',\n   "end"')
    a = a.replace(', "responsible"',',\n   "responsible"')
    a = a.replace(', "pred"',',\n   "pred"')
    a = a.replace('"]}','"]\n  }')
    a = a.replace('{"A"','{\n "A"')
    a = a.replace('}}','},\n  "END": {\n   "Tid": "END",\n   "start": 0,\n   "duration": 0,\n   "lag":0,\n   "end": 0,\n   "responsible": "Responsible",\n   "pred": ["WWW","YYY"]}\n}')
    a = a.replace('"A,C"','"A","C"')
    a = a.replace('"B,D"','"B","D"')
    a = a.replace('"A,C,E"','"A","C","E"')
    a = a.replace('"B,D,F"','"B","D","F"')
    a = a.replace('"I,J,K"','"I","J","K"')
    a = a.replace('"L,M,N"','"L","M","N"')
    a = a.replace('"O,P,Q"','"O","P","Q"')
    a = a.replace('"R,S,T"','"R","S","T"')
    a = a.replace('"V,W,X"','"V","W","X"')
    a = a.replace('"Y,Z,AA"','"Y","Z","AA"')
    a = a.replace('"BB,CC,DD"','"BB","CC","DD"')
    a = a.replace('"EE,FF,GG"','"EE","FF","GG"')
    a = a.replace('"PP,QQ,RR"','"PP","QQ","RR"')
    a = a.replace('"SS,TT,UU"','"SS","TT","UU"')
    a = a.replace('"VV,WW,XX"','"VV","WW","XX"')
    a = a.replace('"YY,ZZ,AAA"','"YY","ZZ","AAA"')
    a = a.replace('"BBB,CCC,DDD"','"BBB","CCC","DDD"')
    a = a.replace('"EEE,FFF,GGG"','"EEE","FFF","GGG"')
    a = a.replace('"HHH,III,JJJ"','"HHH","III","JJJ"')
    a = a.replace('"KKK,LLL,MMM"','"KKK","LLL","MMM"')
    a = a.replace('"A,C,E,G"','"A","C","E","G"')
    a = a.replace('"B,D,F,H"','"B","D","F","H"')
    a = a.replace('"HH,II,JJ,KK,LL,MM,NN,OO"','"HH","II","JJ","KK","LL","MM","NN","OO"')
    a = a.replace('"NNN,OOO,PPP,QQQ,RRR,SSS,TTT,UUU"','"NNN","OOO","PPP","QQQ","RRR","SSS","TTT","UUU"')
    file.write(a)

from graphviz import Digraph, nohtml
import ast
import sys
import json

class PertChart:
    def getInput(self, filename):
        task_list = []
        try:
            with open(filename) as f:
                task_list = json.load(f)
        except:
            print("Cannot generate PERT chart. File content of <" + filename + "> cannot be loaded.")
            sys.exit(1)
               
        return task_list
    def calculate_values(self, p):
        p1 = p
        for k, v in p1.items():
            pred = p1[k]["pred"]
            
            if p1[k]['pred'][0] == "START": #no predecessor
                p1[k]['end'] = p1[k]['start'] + p1[k]['duration']+ p1[k]['lag']
                
            elif len(pred) == 1: # 1 predecessor
                key = p1[k]["pred"][0]

                p1[k]['start'] = p1[key]['end'] #EF of predecessor
                p1[k]['end'] = p1[k]['start'] + p1[k]['duration']+ p1[k]['lag']
            
            elif len(pred) >1: # more than 1 predecessor
                key = pred[1].strip()
                ends = [p1[p.strip()]['end'] for p in pred] # list comprehenssion
                p1[k]['start'] = max(ends) 
                p1[k]['end'] = p1[k]['start'] + p1[k]['duration']+ p1[k]['lag']
        return p1
        
    def create_pert_chart(self, task_list, fill_color = 'grey93', line_color = 'blue'):
        a = task_list
        # Graph Instance
        g = Digraph('g', 
                    filename='PERT.gv',
                    node_attr={'shape': 'Mrecord', 
                               'height': '.1'})

        # configurations
        fl_color = fill_color
        ln_color = line_color

        g.attr(rankdir='LR')
        g.attr('node', shape='record')

        # Nodes           
        for k, v in a.items():
            if a[k]['Tid'] == "END":
                continue
            g.node(a[k]["Tid"],
                nohtml('<f0>' +
                    a[k]["Tid"] +
                    ' |{' + str(a[k]["start"]) + '|' + str(a[k]["duration"]) +'|' + str(a[k]["lag"]) + '|' + str(a[k]["end"]) + '}|<f2>' + a[k]["responsible"]),
                    fillcolor=fl_color,
                    style='filled',
                    color=ln_color
                )

        # Edges
        try:
            for k, v in a.items(): # for task in json task list
                if a[k]["Tid"] == "END":
                    predecessors = a[k]["pred"]
                    if len(predecessors)>1:
                        for task in predecessors:
                            g.edge(task, a[k]["Tid"])
                    else:
                        g.edge(a[k]["pred"][0], "FINISH")
                else:
                    predecessors = a[k]["pred"]
                    if len(predecessors)>1:
                        for task in predecessors:
                            g.edge(task, a[k]["Tid"])
                    else:
                        g.edge(a[k]["pred"][0], a[k]["Tid"])
        except Exception as e: 
            print("Unexpected error. Check your inputs")
            print(e)
        print(g)
        g.view()

if __name__ == '__main__':
    pc = PertChart()
    filename ='/content/preprocessing2.txt'
    #get data from file
    task_list = pc.getInput(filename)
    # caluculate values
    task_list = pc.calculate_values(task_list)
    # create pert chart
    pc.create_pert_chart(task_list)