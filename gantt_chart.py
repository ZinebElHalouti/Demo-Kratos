# -*- coding: utf-8 -*-
"""Gantt chart.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YxzFRCSIeW9J3CefqjKid3ipctb57YG1
"""

pip install ProcessScheduler

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import processscheduler as ps

data=pd.ExcelFile('/Fiche des tâches 3 (1).xlsx')
df = pd.read_excel(data, 'Feuil2')
print(df.head())

df['durée en j']=df['durée en j']*8*60
df['durée en j']=df['durée en j'].astype(int)

df

L=[]
for i in range(len(df)):
  L.append([df['Libellé'][i],df['durée en j'][i]])
print(L)

type(L[0][1])

# a simple problem, without horizon (solver will find it)
pb = ps.SchedulingProblem('Gestion de projet Hall de stockage OCP')

# add tasks
A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,V,W,X,Y,Z,AA,BB,CC,DD,EE,FF,GG,HH,II,JJ,KK,LL,MM,NN,OO,PP,QQ,RR,SS,TT,UU,VV,WW,XX,YY,ZZ,AAA,BBB,CCC,DDD,EEE,FFF,GGG,HHH,III,JJJ,KKK,LLL,MMM,NNN,OOO,PPP,QQQ,RRR,SSS,TTT,UUU,VVV,WWW,XXX,YYY=ps.FixedDurationTask("A", 480), ps.FixedDurationTask("B", 480), ps.FixedDurationTask("C", 480), ps.FixedDurationTask("D", 480), ps.FixedDurationTask("E", 480), ps.FixedDurationTask("F", 480), ps.FixedDurationTask("G", 720), ps.FixedDurationTask("H", 720), ps.FixedDurationTask("I", 90), ps.FixedDurationTask("J", 90), ps.FixedDurationTask("K", 90), ps.FixedDurationTask("L", 90), ps.FixedDurationTask("M", 90), ps.FixedDurationTask("N", 90), ps.FixedDurationTask("O", 90), ps.FixedDurationTask("P", 90), ps.FixedDurationTask("Q", 90), ps.FixedDurationTask("R", 90), ps.FixedDurationTask("S", 90), ps.FixedDurationTask("T", 90), ps.FixedDurationTask("V", 90), ps.FixedDurationTask("W", 90), ps.FixedDurationTask("X", 90), ps.FixedDurationTask("Y", 90), ps.FixedDurationTask("Z", 90), ps.FixedDurationTask("AA", 90), ps.FixedDurationTask("BB", 90), ps.FixedDurationTask("CC", 90), ps.FixedDurationTask("DD", 90), ps.FixedDurationTask("EE", 90), ps.FixedDurationTask("FF", 90), ps.FixedDurationTask("GG", 90), ps.FixedDurationTask("HH", 210), ps.FixedDurationTask("II", 210), ps.FixedDurationTask("JJ", 210), ps.FixedDurationTask("KK", 210), ps.FixedDurationTask("LL", 210), ps.FixedDurationTask("MM", 210), ps.FixedDurationTask("NN", 210), ps.FixedDurationTask("OO", 210), ps.FixedDurationTask("PP", 90), ps.FixedDurationTask("QQ", 90), ps.FixedDurationTask("RR", 90), ps.FixedDurationTask("SS", 90), ps.FixedDurationTask("TT", 90), ps.FixedDurationTask("UU", 90), ps.FixedDurationTask("VV", 90), ps.FixedDurationTask("WW", 90), ps.FixedDurationTask("XX", 90), ps.FixedDurationTask("YY", 90), ps.FixedDurationTask("ZZ", 90), ps.FixedDurationTask("AAA", 90), ps.FixedDurationTask("BBB", 90), ps.FixedDurationTask("CCC", 90), ps.FixedDurationTask("DDD", 90), ps.FixedDurationTask("EEE", 90), ps.FixedDurationTask("FFF", 90), ps.FixedDurationTask("GGG", 90), ps.FixedDurationTask("HHH", 90), ps.FixedDurationTask("III", 90), ps.FixedDurationTask("JJJ", 90), ps.FixedDurationTask("KKK", 90), ps.FixedDurationTask("LLL", 90), ps.FixedDurationTask("MMM", 90), ps.FixedDurationTask("NNN", 210), ps.FixedDurationTask("OOO", 210), ps.FixedDurationTask("PPP", 210), ps.FixedDurationTask("QQQ", 210), ps.FixedDurationTask("RRR", 210), ps.FixedDurationTask("SSS", 210), ps.FixedDurationTask("TTT", 210), ps.FixedDurationTask("UUU", 210), ps.FixedDurationTask("VVV", 960), ps.FixedDurationTask("WWW", 1680), ps.FixedDurationTask("XXX", 960), ps.FixedDurationTask("YYY", 1680)# precedence constraint: task_world must be scheduled
# after task_hello
#c1 = pb.add_constraint(ps.TaskPrecedence(task_hello, task_world, offset=0)
#pb.add_constraint(c1) # explicitly add this constraint to the problem

pb.add_constraint(ps.TaskPrecedence(A,C))
pb.add_constraint(ps.TaskPrecedence(B,D))
pb.add_constraint(ps.TaskPrecedence(C,E))
pb.add_constraint(ps.TaskPrecedence(D,F))
pb.add_constraint(ps.TaskPrecedence(E,G))
pb.add_constraint(ps.TaskPrecedence(F,H))
for i in [I,J,K,L,M,N,O,P,Q,R,S,T,V,W,X,Y,Z,AA,BB,CC,DD,EE,FF,GG]:
  pb.add_constraint(ps.TaskPrecedence(G,i))
for i in [PP,QQ,RR,SS,TT,UU,VV,WW,XX,YY,ZZ,AAA,BBB,CCC,DDD,EEE,FFF,GGG,HHH,III,JJJ,KKK,LLL,MMM]:
  pb.add_constraint(ps.TaskPrecedence(H,i))
pb.add_constraint(ps.TaskPrecedence(I,HH))
pb.add_constraint(ps.TaskPrecedence(J,HH))
pb.add_constraint(ps.TaskPrecedence(K,HH))
pb.add_constraint(ps.TaskPrecedence(L,II))
pb.add_constraint(ps.TaskPrecedence(M,II))
pb.add_constraint(ps.TaskPrecedence(N,II))
pb.add_constraint(ps.TaskPrecedence(O,JJ))
pb.add_constraint(ps.TaskPrecedence(P,JJ))
pb.add_constraint(ps.TaskPrecedence(Q,JJ))
pb.add_constraint(ps.TaskPrecedence(R,KK))
pb.add_constraint(ps.TaskPrecedence(S,KK))
pb.add_constraint(ps.TaskPrecedence(T,KK))
pb.add_constraint(ps.TaskPrecedence(V,LL))
pb.add_constraint(ps.TaskPrecedence(W,LL))
pb.add_constraint(ps.TaskPrecedence(X,LL))
pb.add_constraint(ps.TaskPrecedence(Y,MM))
pb.add_constraint(ps.TaskPrecedence(Z,MM))
pb.add_constraint(ps.TaskPrecedence(AA,MM))
pb.add_constraint(ps.TaskPrecedence(BB,NN))
pb.add_constraint(ps.TaskPrecedence(CC,NN))
pb.add_constraint(ps.TaskPrecedence(DD,NN))
pb.add_constraint(ps.TaskPrecedence(EE,OO))
pb.add_constraint(ps.TaskPrecedence(FF,OO))
pb.add_constraint(ps.TaskPrecedence(GG,OO))
pb.add_constraint(ps.TaskPrecedence(PP,NNN))
pb.add_constraint(ps.TaskPrecedence(QQ,NNN))
pb.add_constraint(ps.TaskPrecedence(RR,NNN))
pb.add_constraint(ps.TaskPrecedence(SS,OOO))
pb.add_constraint(ps.TaskPrecedence(TT,OOO))
pb.add_constraint(ps.TaskPrecedence(UU,OOO))
pb.add_constraint(ps.TaskPrecedence(VV,PPP))
pb.add_constraint(ps.TaskPrecedence(WW,PPP))
pb.add_constraint(ps.TaskPrecedence(XX,PPP))
pb.add_constraint(ps.TaskPrecedence(YY,QQQ))
pb.add_constraint(ps.TaskPrecedence(ZZ,QQQ))
pb.add_constraint(ps.TaskPrecedence(AAA,QQQ))
pb.add_constraint(ps.TaskPrecedence(BBB,RRR))
pb.add_constraint(ps.TaskPrecedence(CCC,RRR))
pb.add_constraint(ps.TaskPrecedence(DDD,RRR))
pb.add_constraint(ps.TaskPrecedence(EEE,SSS))
pb.add_constraint(ps.TaskPrecedence(FFF,SSS))
pb.add_constraint(ps.TaskPrecedence(GGG,SSS))
pb.add_constraint(ps.TaskPrecedence(HHH,TTT))
pb.add_constraint(ps.TaskPrecedence(III,TTT))
pb.add_constraint(ps.TaskPrecedence(JJJ,TTT))
pb.add_constraint(ps.TaskPrecedence(KKK,UUU))
pb.add_constraint(ps.TaskPrecedence(LLL,UUU))
pb.add_constraint(ps.TaskPrecedence(MMM,UUU))
pb.add_constraint(ps.TaskPrecedence(HH,VVV))
pb.add_constraint(ps.TaskPrecedence(II,VVV))
pb.add_constraint(ps.TaskPrecedence(JJ,VVV))
pb.add_constraint(ps.TaskPrecedence(KK,VVV))
pb.add_constraint(ps.TaskPrecedence(LL,VVV))
pb.add_constraint(ps.TaskPrecedence(MM,VVV))
pb.add_constraint(ps.TaskPrecedence(NN,VVV))
pb.add_constraint(ps.TaskPrecedence(OO,VVV))
pb.add_constraint(ps.TaskPrecedence(VVV,WWW))
pb.add_constraint(ps.TaskPrecedence(NNN,XXX))
pb.add_constraint(ps.TaskPrecedence(OOO,XXX))
pb.add_constraint(ps.TaskPrecedence(PPP,XXX))
pb.add_constraint(ps.TaskPrecedence(QQQ,XXX))
pb.add_constraint(ps.TaskPrecedence(RRR,XXX))
pb.add_constraint(ps.TaskPrecedence(SSS,XXX))
pb.add_constraint(ps.TaskPrecedence(TTT,XXX))
pb.add_constraint(ps.TaskPrecedence(UUU,XXX))
pb.add_constraint(ps.TaskPrecedence(XXX,YYY))

# solve
solver = ps.SchedulingSolver(pb)
solution = solver.solve()

# display solution, ascii or matplotlib gantt diagram
solution.render_gantt_matplotlib(fig_size=(12,12))





